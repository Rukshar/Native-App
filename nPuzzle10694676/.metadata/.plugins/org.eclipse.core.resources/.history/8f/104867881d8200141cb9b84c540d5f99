package nl.mprog.projects.nPuzzle10694676;

import java.util.ArrayList;
import java.util.Collections;

import android.app.Activity;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.GridView;
import android.widget.TextView;
import android.widget.AdapterView.OnItemClickListener;

public class GamePlay extends Activity {
	public static int height;
	public static int width;
	public static int columns = 4;
	private int cropsIndexSize;
	private int count;
	private int positionImage;

	// checks if we have a saved state
	private boolean savedState;
	private boolean shouldSave;

	// the textview containing the number of moves
	private TextView steps;
	private Bitmap emptyTile;

	private ArrayList<Bitmap> crops;
	private ArrayList<Integer> cropsIndex;

	// list of solved bitmaps
	private ArrayList<Bitmap> solved;
	
	private PlayAdapter playAdapter;
	boolean canMove;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.gameplay);
		Intent intent = getIntent();
		positionImage = (Integer) intent.getExtras().get("id");
		boolean reshuffle = (Boolean) intent.getBooleanExtra("reshuffle", false);

		canMove = false; // default
		shouldSave = true;
		count = 0;

		// Load all functions
		System.out.println(columns + "columns in oncreate");
		System.out.println(count + "counts in oncreate");

		// create crops and solved as arraylists of bitmaps (not shuffled)
		createTheBitmaps();
		
		//load a saved state if there is one
		SharedPreferences sharedPreferences = getSharedPreferences("Data", MODE_PRIVATE);
		savedState = sharedPreferences.getBoolean("saved", false);
		if (savedState && !reshuffle){
			System.out.println("Found saved state");
			load();
		}
		else 
			System.out.println("NO! saved state");

		// display crops on the screen
		GridView gvp = (GridView) findViewById(R.id.gridviewplay);
		playAdapter = new PlayAdapter(getApplicationContext(), crops);
		gvp.setNumColumns(columns);
		gvp.setAdapter(playAdapter);

		steps = (TextView) findViewById(R.id.counts);

		if (!savedState && !reshuffle) {
			sleepAndShuffle();
		} else {
			if (reshuffle){
				shuffleBitmaps();
				count = (Integer) intent.getIntExtra("shuffles", 0);
			}
			canMove = true;
			steps.setText("Number of shuffles: " + count);
		}

		gvp.setOnItemClickListener(new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
				// TODO Auto-generated method stub
				if (canMove) {
					playGame(position);
					winGame();
				}
			}
		});
	}

	// LOADS THE SAVED VALUES
	public void load() {
		ArrayList<Integer> newArrayIndex;

		SharedPreferences sharedPreferences = getSharedPreferences("Data", MODE_PRIVATE);

		columns = sharedPreferences.getInt("level", columns);
		count = sharedPreferences.getInt("steps", 0);
		cropsIndexSize = columns*columns;
		
		System.out.println(columns + "columns in load");
		System.out.println(count + "counts in load");
		System.out.println(savedState + "savedstate in load");
		System.out.println(cropsIndexSize + "Index size");

		// if we have a savedstate -> load the old arraylist of bitmaps
		if (savedState) {
			//create new solved and crops for the number of columns we have now
			createTheBitmaps();
			newArrayIndex = new ArrayList<Integer>();
			
			for (int i = 0; i < cropsIndexSize; i++) {
				int value = sharedPreferences.getInt("cropsindex" + i, i);
				newArrayIndex.add(value);
			}
			cropsIndex = newArrayIndex;
			indexesToBitmaps(); // set crops as the savedstate arraylist
		}
	}

	// SETS ARRAYLIST OF INDEXES TO BITMAP ARRAYLIST
	public void indexesToBitmaps() {
		ArrayList<Bitmap> arraytocrops;
		arraytocrops = new ArrayList<Bitmap>();
		for (int i = 0; i < cropsIndex.size(); i++) {
			int theIndex = cropsIndex.get(i);
			Bitmap thebitmap = solved.get(theIndex);
			arraytocrops.add(thebitmap);
			if (theIndex == cropsIndex.size() - 1) {
				emptyTile = thebitmap;
			}
		}
		crops = arraytocrops; // ARRAY TO CROPS BECOMES CROPS
	}

	// CREATES LISTS OF BITMAPS
	public void createTheBitmaps() {
		crops = new ArrayList<Bitmap>();
		solved = new ArrayList<Bitmap>();
		try {
			background = GridAdapter.puzzles.get(positionImage);
			height = background.getHeight();
			width = background.getWidth();

			for (int j = 0; j <= (height - (height / columns)); j += (height / columns)) {
				for (int i = 0; i <= (width - (width / columns)); i += (width / columns)) {
					Bitmap cropped = Bitmap.createBitmap(background, i, j, (width / columns), (height / columns));
					crops.add(cropped);
					solved.add(cropped);
				}
			}
		} catch (OutOfMemoryError e) {
			e.printStackTrace();
		}
		createArrayOfIndexes(); // CREATE ALSO ARRAYLIST WITH INDEXES
		crops.remove(crops.size() - 1);
		solved.remove(solved.size() - 1);
		addEmptySpot();
	}

	// CREATES ARRAYLIST OF INDEXES
	public void createArrayOfIndexes() {
		cropsIndex = new ArrayList<Integer>();
		for (int i = 0; i < (columns * columns); i++) {
			cropsIndex.add(i);
		}
	}

	// ADDS THE EMPTY SPOT
	public void addEmptySpot() {
		Bitmap empty = BitmapFactory.decodeResource(this.getResources(), R.drawable.square);
		final Bitmap croppedEmpty = Bitmap.createBitmap(empty, (width / columns) * (columns - 1), (height / columns)
				* (columns - 1), 500, 500);
		empty.recycle();
		crops.add(croppedEmpty);
		solved.add(croppedEmpty);
		emptyTile = crops.get(crops.size() - 1);
	}

	// WIN CONSTRAINT
	public void winGame() {
		if (crops.equals(solved)) {
			Intent NewIntent = new Intent(getApplicationContext(), YouWin.class);
			NewIntent.putExtra("shuffles", count);
			NewIntent.putExtra("Images", positionImage);
			startActivity(NewIntent);
			count = 0;
			clearSharedPreferences();
			this.finish();
		}
	}

	// SHUFFLES THE BITMAPS
	public void shuffleBitmaps() {
		if (columns == 4) {
			Collections.swap(crops, 0, 1);
			Collections.reverse(crops);
			Collections.rotate(crops.subList(0, (columns * columns)), -1);
			playAdapter.notifyDataSetChanged();
			Collections.swap(cropsIndex, 0, 1);
			Collections.reverse(cropsIndex);
			Collections.rotate(cropsIndex.subList(0, (columns * columns)), -1);
		} else {
			Collections.reverse(crops);
			Collections.rotate(crops.subList(0, (columns * columns)), -1);
			playAdapter.notifyDataSetChanged();
			Collections.reverse(cropsIndex);
			Collections.rotate(cropsIndex.subList(0, (columns * columns)), -1);
		}
	}

	// GAME CONSTRAINTS
	public void playGame(int position) {
		int emptySpot = crops.indexOf(emptyTile);
		if (position >= 0 && position < crops.size()) {
			if (position - 1 == emptySpot && (position) % (columns) != 0) {
				Collections.swap(crops, position, position - 1);
				Collections.swap(cropsIndex, position, position - 1);
				playAdapter.notifyDataSetChanged();
				count++;
			} else if (position + 1 == emptySpot && (position + 1) % columns != 0) {
				Collections.swap(crops, position, position + 1);
				Collections.swap(cropsIndex, position, position + 1);
				playAdapter.notifyDataSetChanged();
				count++;
			} else if (position - columns == emptySpot) {
				Collections.swap(crops, position, position - columns);
				Collections.swap(cropsIndex, position, position - columns);
				playAdapter.notifyDataSetChanged();
				count++;
			} else if (position + columns == emptySpot) {
				Collections.swap(crops, position, position + columns);
				Collections.swap(cropsIndex, position, position + columns);
				playAdapter.notifyDataSetChanged();
				count++;
			}
			steps.setText("Number of shuffles: " + count);
			// System.out.println(cropsIndex + "cropsIndex");
		}
	}

	// SHOWS SOLVED PUZZLE FOR 3 SECONDS
	public void sleepAndShuffle() {
		new Thread(new Runnable() {
			@Override
			public void run() {
				// TODO Auto-generated method stub
				try {
					Thread.sleep(3000);

				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				runOnUiThread(new Runnable() {
					@Override
					public void run() {
						// TODO Auto-generated method stub
						shuffleBitmaps();
						steps.setText("Number of shuffles: " + count);
						canMove = true;
					}
				});
			}
		}).start();
	}

	// SAVES VALUES
	public void saved() {
		SharedPreferences sharedPreferences = getSharedPreferences("Data", MODE_PRIVATE);
		SharedPreferences.Editor editor = sharedPreferences.edit();
		System.out.println(cropsIndex + "CROPSINDEX IN SAVED");

		for (int i = 0; i < cropsIndex.size(); i++) {
			editor.putInt("cropsindex" + i, cropsIndex.get(i));
		}

		editor.putBoolean("saved", shouldSave);
		if (shouldSave){
			editor.putInt("level", columns);
			editor.putInt("steps", count);
			editor.putInt("size", cropsIndex.size());
			editor.putInt("imageIndex", positionImage);
		}
		editor.commit();
	}

	// SAVES VALUES WHEN APP IS KILLED
	protected void onPause() {
		super.onPause();
		saved();
	}

	// OPTIONS MENU
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// TODO Auto-generated method stub
		getMenuInflater().inflate(R.menu.during_game, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		
		switch (item.getItemId()) {
		case (R.id.reshuffle):
			changeDifficulty(true);
			return true;

		case (R.id.easygame):
			columns = 3;
			changeDifficulty(false);
			return true;

		case (R.id.mediumgame):
			columns = 4;
			changeDifficulty(false);
			return true;
			
		case (R.id.difficultgame):
			columns = 5;
			changeDifficulty(false);
			return true;

		case (R.id.quit):
			clearSharedPreferences();
			Intent myIntent = new Intent(getApplicationContext(), ImageSelection.class);
			startActivity(myIntent);
			this.finish();

		default:
			return super.onOptionsItemSelected(item);
		}
	}
	
	public void reshuffle(){
		createTheBitmaps();
	    shuffleBitmaps();
	}
	
	public void changeDifficulty(boolean reshuffle){
		clearSharedPreferences();
		Intent intent = new Intent(getApplicationContext(), GamePlay.class);
		intent.putExtra("id", positionImage);
		
		//on reshuffle
		if (reshuffle){
			intent.putExtra("reshuffle", reshuffle);
			intent.putExtra("shuffles", count);
		}
		
		startActivity(intent);
		this.finish();
	}

	public void clearSharedPreferences() {
		SharedPreferences sharedPreferences = getSharedPreferences("Data", MODE_PRIVATE);
		SharedPreferences.Editor editor = sharedPreferences.edit();
		editor.putBoolean("saved", false);
		shouldSave = false;
		editor.commit();
	}

}
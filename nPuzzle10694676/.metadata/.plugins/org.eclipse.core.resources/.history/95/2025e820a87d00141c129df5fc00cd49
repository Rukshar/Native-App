package nl.mprog.projects.nPuzzle10694676;

import java.util.ArrayList;
import java.util.Collections;

import android.app.Activity;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.util.DisplayMetrics;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.GridView;
import android.widget.TextView;

public class GamePlay extends Activity {
	public static int height;
	public static int width;
	public static int columns = 4;
	private static int count;
	public Bitmap emptyTile;
	public  ArrayList<Bitmap> crops;
	public PlayAdapter playAdapter;
	public static int screenWidth;
	public ArrayList<Bitmap>ieks;
	public static final String mPrefix = "mArray";

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.gameplay);
		Intent intent = getIntent();
		DisplayMetrics dm = getResources().getDisplayMetrics(); 
		screenWidth = dm.widthPixels;
		final int positionImage = (Integer) intent.getExtras().get("id");
		crops = new ArrayList<Bitmap>();
		ieks = new ArrayList<Bitmap>();
		final ArrayList<Bitmap> solved = new ArrayList<Bitmap>();
		System.out.println(screenWidth);
		
		
		SharedPreferences sharedPreferences = getSharedPreferences("Data", MODE_PRIVATE);
		columns = sharedPreferences.getInt("level", 0);
		count = sharedPreferences.getInt("steps", 0);
		String ieks = sharedPreferences.getString("value","");
		System.out.println(ieks);
		
		
		try{
			Bitmap background = GridAdapter.puzzles.get(positionImage);
			Bitmap empty = BitmapFactory.decodeResource(this.getResources(), R.drawable.square);
			height = background.getHeight();
			width =  background.getWidth();
		
			for(int j = 0; j <= (height - (height/columns)); j += (height/columns)){
				for(int i = 0; i <= (width - (width/columns)); i += (width/columns)){
					Bitmap cropped = Bitmap.createBitmap(background, i, j, (width/columns), (height/columns));
					crops.add(cropped);
					solved.add(cropped);
				}
			}
			final Bitmap croppedEmpty = Bitmap.createBitmap(empty, (width/columns)*(columns-1), (height/columns)*(columns-1), 500, 500);
			empty.recycle();
			crops.remove(crops.size()-1);
			solved.remove(solved.size()-1);
		
			
			playAdapter = new PlayAdapter(getApplicationContext(), crops);
			
			GridView gvp = (GridView) findViewById(R.id.gridviewplay);
			final TextView steps = (TextView) findViewById(R.id.counts);
			gvp.setNumColumns(columns);
			gvp.setAdapter(playAdapter);
			
			new Thread(new Runnable(){

				@Override
				public void run() {
					// TODO Auto-generated method stub
					try{
						Thread.sleep(3000);
						
					}catch(InterruptedException e){
						e.printStackTrace();
					}
					runOnUiThread(new Runnable(){
						@Override
						public void run() {
							// TODO Auto-generated method stub
							if (columns == 4){
								Collections.swap(crops, 0, 1);
								Collections.reverse(crops);
								playAdapter.notifyDataSetChanged();
							}else{
								Collections.reverse(crops);
								playAdapter.notifyDataSetChanged();
							}
							crops.add(croppedEmpty);
							solved.add(croppedEmpty);
							emptyTile = crops.get(crops.size()-1);
							//count = 0;		
						}
					});	
				}	
			}).start();
			
			gvp.setOnItemClickListener(new OnItemClickListener(){

				@Override
				public void onItemClick(AdapterView<?> parent, View view,
						int position, long id) {
					// TODO Auto-generated method stub
					int emptySpot = crops.indexOf(emptyTile);
					if(position >= 0 && position < crops.size()){
						if(position - 1 == emptySpot && (position) % (columns) != 0){
							Collections.swap(crops, position, position-1);
							playAdapter.notifyDataSetChanged();
							count++;
						}
						else if(position + 1 == emptySpot && (position+1) % columns != 0){
							Collections.swap(crops, position, position+1);
							playAdapter.notifyDataSetChanged();
							count++;
						}
						else if(position - columns == emptySpot){
							Collections.swap(crops, position, position-columns);
							playAdapter.notifyDataSetChanged();
							count++;
						}
						else if(position + columns == emptySpot){
							Collections.swap(crops, position, position+columns);
							playAdapter.notifyDataSetChanged();
							count++;
						}
						steps.setText("Number of shuffles: " + count);
						//System.out.println(positionImage);
					}
					if(crops.equals(solved)){
						Intent NewIntent = new Intent(getApplicationContext(), YouWin.class);
						NewIntent.putExtra("shuffles", count);
						NewIntent.putExtra("Images", positionImage);
						startActivity(NewIntent);
					}
						
				}
				
			});
		}
		catch (OutOfMemoryError e){
			e.printStackTrace();
		}
	}
	
	protected void onPause(){
		super.onPause();
		
		SharedPreferences sharedPreferences = getSharedPreferences("Data", MODE_PRIVATE);
		SharedPreferences.Editor editor = sharedPreferences.edit();
		editor.putInt("level", columns);
		editor.putInt("steps", count);
		
		for (int i = 0; i < crops.size(); i++){
			editor.putString("value" + i, "/sdcard/"+crops.get(i));
		}
		
		editor.commit();
		System.out.println("PAUSEDDDDDDD");
		System.out.println(columns + "columns");
		System.out.println(count + "count");
	}
	
//	protected void onResume(){
//		super.onResume();
//		SharedPreferences sharedPreferences = getSharedPreferences("Data", MODE_PRIVATE);
//		int stringColumns = sharedPreferences.getInt("level", 0);
//		int stringSteps = sharedPreferences.getInt("steps", 0);
//		System.out.println("Resuumeeedd");
//		System.out.println(columns + "columns");
//		System.out.println(count + "count");
//	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// TODO Auto-generated method stub
		getMenuInflater().inflate(R.menu.during_game, menu);
        return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// TODO Auto-generated method stub
		   switch(item.getItemId()){
		   	case(R.id.reshuffle):
		   		Collections.shuffle(crops);
		   	playAdapter.notifyDataSetChanged();
		   	return true;
		   	
		   	case(R.id.easygame):
		   		columns = 3;
		   		Intent intent = getIntent();
		   		finish();
		   		startActivity(intent);
		   	return true;
		   	
		   	case(R.id.mediumgame):
		   		columns = 4;
			   	Intent intentje = getIntent();
			   	finish();
			   	startActivity(intentje);
		   	return true;
		   	
		   	case(R.id.difficultgame):
		   		columns = 5;
		   		Intent intents = getIntent();
		   		finish();
		   		startActivity(intents);
		   	return true;
		   	
		   	case(R.id.quit):
		   		Intent myIntent = new Intent(getApplicationContext(),ImageSelection.class);
		   		startActivity(myIntent);
		   	
		   	default:
		   		return super.onOptionsItemSelected(item);
		   
		   }
	}
}
